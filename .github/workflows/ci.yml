name: 🔍 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Cancel previous runs if a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  NX_CLOUD_DISTRIBUTED_EXECUTION: 'false'

jobs:
  # Code Quality and Type Checking
  quality:
    name: 🧹 Code Quality & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Cache Nx computation cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-

      - name: 🧹 Lint Frontend
        run: npx nx lint frontend --skip-nx-cache

      - name: 🧹 Lint Backend
        run: npx nx lint backend --skip-nx-cache

      - name: 🔧 TypeScript check Frontend
        run: npx nx typecheck frontend --skip-nx-cache

      - name: 🔧 TypeScript check Backend
        run: npx nx typecheck backend --skip-nx-cache

  # Unit Tests
  test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        project: ['frontend', 'backend']
      fail-fast: false
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Cache Nx computation cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-

      - name: 🧪 Run tests for ${{ matrix.project }}
        run: npx nx test ${{ matrix.project }} --coverage --watchAll=false --passWithNoTests --skip-nx-cache
        env:
          CI: true
          NX_CLOUD_DISTRIBUTED_EXECUTION: 'false'

      - name: 📊 Upload test coverage
        if: matrix.project == 'frontend'
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage/apps/${{ matrix.project }}
          flags: ${{ matrix.project }}
          name: ${{ matrix.project }}-coverage
          fail_ci_if_error: false

  # Build Verification
  build:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality]
    
    strategy:
      matrix:
        project: ['frontend', 'backend']
      fail-fast: false
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Cache Nx computation cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-

      - name: 🏗️ Build ${{ matrix.project }}
        run: npx nx build ${{ matrix.project }} --configuration=production --skip-nx-cache
        env:
          # GitHub Pages environment variables for frontend
          VITE_BASE_URL: '/iAgent/'
          VITE_API_BASE_URL: '/iAgent/api'
          VITE_ENVIRONMENT: 'production'
          NX_CLOUD_DISTRIBUTED_EXECUTION: 'false'

      - name: 📊 Analyze build size
        if: matrix.project == 'frontend'
        run: |
          echo "📊 Frontend build analysis:"
          du -sh dist/apps/frontend
          echo "📄 Main files:"
          find dist/apps/frontend -name "*.js" -o -name "*.css" | head -10

      - name: 📋 Upload build artifacts
        if: matrix.project == 'frontend'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: dist/apps/frontend
          retention-days: 7

  # Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔒 Run npm audit
        run: npm audit --audit-level=moderate --no-fund

  # CI Success Check
  ci-success:
    name: ✅ CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [quality, test, build, security]
    if: always()
    
    steps:
      - name: ✅ All checks passed
        if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
        run: |
          echo "✅ All CI checks passed successfully!"
          echo "🎉 Code is ready for deployment!"
          
      - name: ❌ Some checks failed
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: |
          echo "❌ Some CI checks failed!"
          echo "🔍 Please review the failed jobs and fix issues."
          exit 1